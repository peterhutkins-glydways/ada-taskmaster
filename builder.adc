--   builder.adc
--   This is where we define all of the pragmas required for building an Ada executable under the
--   Glyways Ada Coding Convention.
--
--   This file may be re-used for multiple projects, and is intended to be included in the project
--   file (e.g. *.gpr) as a global configuration pragma file as follows:
--     package Builder is
--        for Global_Configuration_Pragmas use "builder.adc";
--     end Builder;
--
--   The Ravenscar profile is a subset of the Ada concurrency facilities that supports determinism,
--   schedulability analysis, constrained memory utilization, and certification to the highest
--   integrity levels. Four distinct application domains are intended:
--      * hard real-time applications requiring predictability,
--      * safety-critical systems requiring formal, stringent certification,
--      * high-integrity applications requiring formal static analysis and verification,
--      * embedded applications requiring both a small memory footprint and low execution overhead.
--   See: https://ada-lang.io/docs/arm/AA-D/AA-D.13/
pragma Profile (Ravenscar);   -- (CON01) Use the Ravenscar profile

--  Alternately, the Ravenscar profile can be broken into its constituent pragmas.
--  Experimentally, I have found that this is not a 100% substitute to "pragma Profile (Ravenscar)",
--  as there are other pragmas (e.g. "pragma Partition_Elaboration_Policy (Sequential)"); that
--  require a delcared restricted profile like Ravenscar.
--
--  The following list constitutes the entirety of Ravenscar, broken into its constituent pragmas.
--  This is useful for testing against individual pragmas.
--  pragma Task_Dispatching_Policy(FIFO_Within_Priorities); -- Tasks are dispatched following a preemptive priority-ordered scheduling policy.
--  pragma Locking_Policy(Ceiling_Locking); -- While tasks and interrupts execute a protected action, they inherit the ceiling priority of the corresponding protected object.
--  pragma Detect_Blocking;            -- Forces detection of potentially blocking operations within a protected operation, and to raise Program_Error if that happens.

--  pragma Restrictions(
--     No_Abort_Statements,            -- Disallow the use of abort statements.
--     No_Asynchronous_Control,
--     No_Calendar,
--     No_Dynamic_Attachment,
--     No_Dynamic_Priorities,
--     No_Implicit_Heap_Allocations,
--     No_Local_Protected_Objects,
--     No_Protected_Type_Allocators,
--     No_Relative_Delay,
--     No_Requeue_Statements,
--     No_Select_Statements,
--     No_Task_Allocators,
--     No_Task_Attributes_Package,
--     No_Task_Hierarchy,
--     No_Task_Termination,
--     Simple_Barriers,
--     Max_Entry_Queue_Length => 1,    -- No task can be queued on a protected entry.
--     Max_Protected_Entries => 1,
--     Max_Task_Entries => 0,          -- No rendezvous statements are allowed.
--     No_Dependence => Ada.Asynchronous_Task_Control,
--     No_Dependence => Ada.Calendar,
--     No_Dependence => Ada.Execution_Time.Group_Budgets,
--     No_Dependence => Ada.Execution_Time.Timers,
--     No_Dependence => Ada.Synchronous_Barriers,
--     No_Dependence => Ada.Task_Attributes,
--     No_Dependence => System.Multiprocessors.Dispatching_Domains
--  );

--  The following pragmas enforce the Glydways Ada Coding Convention.
pragma Restrictions (
   No_Unrecognized_Aspects,   --   Disallow unrecognized aspects in "with" statement
   No_Unrecognized_Pragmas,   --   Disallow unrecognized pragmas
   No_Anonymous_Allocators,   --   (DYN01) Disallow anonymous access types; use a named access type
   No_Coextensions,           --   (DYN01) Disallow coextensions; use intermediate variables of named access type in objects
   No_Access_Parameter_Allocators, -- (DYN01) Disallow allocators in parameters; use intermediate variables of named access type
   Immediate_Reclamation,     --   (DYN01) Storage allocated by the compiler at run-time for representing objects is reclaimed at once.
   No_Allocators,             --   (DYN02)(DYN03) This restriction ensures at compile time that there are no occurrences of an allocator.
   No_Task_Allocators,        --   (DYN02) Disallow task allocators. Also covered by Ravenscar.
   --  The No_Local_Allocators restriction is deemed too restrictive for general use, but is included here for completeness.
   -- No_Local_Allocators,       --   (DYN04) This restriction ensures at compile time that there are no occurrences of an allocator in subprograms, generic subprograms, tasks, and entry bodies.
   No_Dispatch,               --   (OOP01) Disallow class-wide constructs
   No_Recursion,              --   (RPP12) Disallow recursion
   No_Dependence => Ada.Unchecked_Deallocation --  (DYN03)(DYN04) Disallow unchecked deallocation
);

-- The following pragmas emulate the limitations of the GNAT PRO certifiable runtime.
-- See https://docs.adacore.com/live/wave/gnat_ugx/html/gnat_ugx/gnat_ugx/support_for_certified_systems.html
-- The Certifiable Profiles provide limited local exception handling through the implicit application of pragma
--  Restrictions (No_Exception_Propagation)`. This restriction allows exceptions to be raised and handled only if the
--  handler is in the same subprogram (more generally in the same scope not counting packages and blocks).
pragma Restrictions (
   No_Exception_Propagation
);
